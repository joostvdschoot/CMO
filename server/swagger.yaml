openapi: 3.0.0
info:
  title: CMO
  description: You can obtain JWT token from login API
  version: 0.1
servers:
  - url: http://localhost:3000/api
    description: Local server for testing
paths:
  /login:
    post:
      summary: Login API
      security: []   # No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:   # Sample object
                username: admin
                password: 62f264d7ad826f02a8af714c0a54b197935b717656b80461686d450f7b3abde4c553541515de2052b9af70f710f0cd8a1a2d3f4d60aa72608d71a63a9a93c0f5
      responses:
        '200':
          description: OK
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /verifyToken:
    post:
      summary: Verify token API
      security: [] #No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /changePassword:
    post:
      summary: Change password API
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordOld:
                  type: string
      responses:
        '200':
          description: OK
                

  #-----  Account  -----
  /account/:
    post:
      summary: CRUD ACTION create
      tags:
        - Account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                channel:
                  type: string
                description:
                  type: string
                maxcredit:
                  type: integer
                name:
                  type: string
                retailcorpthreshold:
                  type: integer
                revolving:
                  type: boolean
                segment:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - Account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
    
  /account/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Account
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Account
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
    post:
      summary: CRUD ACTION update
      tags:
        - Account
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
    
  /account/findByLessor/{key}:
    get:
      summary: CRUD ACTION findByLessor
      tags:
        - Account
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
    
  /account/findByProduct/{key}:
    get:
      summary: CRUD ACTION findByProduct
      tags:
        - Account
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
    
  /account/findBylessor/{key}:
    get:
      summary: CRUD ACTION findBylessor
      tags:
        - Account
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
    
  /account/findByproduct/{key}:
    get:
      summary: CRUD ACTION findByproduct
      tags:
        - Account
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
    
  #-----  Country  -----
  /country/:
    post:
      summary: CRUD ACTION create
      tags:
        - Country
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                name:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - Country
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Country"
    
  /country/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Country
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Country
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
    post:
      summary: CRUD ACTION update
      tags:
        - Country
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Country"
    
  #-----  CreditLine  -----
  /creditline/:
    post:
      summary: CRUD ACTION create
      tags:
        - CreditLine
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditLine"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationid:
                  type: string
                creditlimit:
                  type: integer
                enddate:
                  type: integer
                groupcreditlimit:
                  type: integer
                revolving:
                  type: boolean
                startdate:
                  type: integer
                status:
                  type: string
                type:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - CreditLine
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CreditLine"
    
  /creditline/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - CreditLine
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - CreditLine
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditLine"
    post:
      summary: CRUD ACTION update
      tags:
        - CreditLine
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditLine"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditLine"
    
  /creditline/findByAccount/{key}:
    get:
      summary: CRUD ACTION findByAccount
      tags:
        - CreditLine
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CreditLine"
    
  /creditline/findByOrganization/{key}:
    get:
      summary: CRUD ACTION findByOrganization
      tags:
        - CreditLine
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CreditLine"
    
  /creditline/findByaccount/{key}:
    get:
      summary: CRUD ACTION findByaccount
      tags:
        - CreditLine
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CreditLine"
    
  /creditline/findByorganization/{key}:
    get:
      summary: CRUD ACTION findByorganization
      tags:
        - CreditLine
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CreditLine"
    
  #-----  Lessor  -----
  /lessor/:
    post:
      summary: CRUD ACTION create
      tags:
        - Lessor
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lessor"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                externalid:
                  type: string
                genesis:
                  type: string
                name:
                  type: string
                number:
                  type: string
                share:
                  type: integer
                type:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - Lessor
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lessor"
    
  /lessor/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Lessor
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Lessor
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lessor"
    post:
      summary: CRUD ACTION update
      tags:
        - Lessor
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lessor"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Lessor"
    
  /lessor/findByCountry/{key}:
    get:
      summary: CRUD ACTION findByCountry
      tags:
        - Lessor
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lessor"
    
  /lessor/findBycountry/{key}:
    get:
      summary: CRUD ACTION findBycountry
      tags:
        - Lessor
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lessor"
    
  #-----  Organization  -----
  /organization/:
    post:
      summary: CRUD ACTION create
      tags:
        - Organization
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                active:
                  type: boolean
                externalid:
                  type: string
                formalname:
                  type: string
                liable:
                  type: boolean
                searchname:
                  type: string
                type:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - Organization
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    
  /organization/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Organization
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Organization
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
    post:
      summary: CRUD ACTION update
      tags:
        - Organization
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
    
  /organization/findByCountry/{key}:
    get:
      summary: CRUD ACTION findByCountry
      tags:
        - Organization
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    
  /organization/findByLessor/{key}:
    get:
      summary: CRUD ACTION findByLessor
      tags:
        - Organization
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    
  /organization/findByPartner/{key}:
    get:
      summary: CRUD ACTION findByPartner
      tags:
        - Organization
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    
  /organization/findBycountry/{key}:
    get:
      summary: CRUD ACTION findBycountry
      tags:
        - Organization
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    
  /organization/findBylessor/{key}:
    get:
      summary: CRUD ACTION findBylessor
      tags:
        - Organization
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    
  /organization/findBypartner/{key}:
    get:
      summary: CRUD ACTION findBypartner
      tags:
        - Organization
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    
  #-----  Partner  -----
  /partner/:
    post:
      summary: CRUD ACTION create
      tags:
        - Partner
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Partner"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                externalid:
                  type: string
                name:
                  type: string
                partnercode:
                  type: string
                type:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - Partner
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Partner"
    
  /partner/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Partner
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Partner
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Partner"
    post:
      summary: CRUD ACTION update
      tags:
        - Partner
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Partner"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Partner"
    
  /partner/findByAccount/{key}:
    get:
      summary: CRUD ACTION findByAccount
      tags:
        - Partner
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Partner"
    
  /partner/findByCountry/{key}:
    get:
      summary: CRUD ACTION findByCountry
      tags:
        - Partner
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Partner"
    
  /partner/findByLessor/{key}:
    get:
      summary: CRUD ACTION findByLessor
      tags:
        - Partner
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Partner"
    
  /partner/findByaccount/{key}:
    get:
      summary: CRUD ACTION findByaccount
      tags:
        - Partner
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Partner"
    
  /partner/findBycountry/{key}:
    get:
      summary: CRUD ACTION findBycountry
      tags:
        - Partner
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Partner"
    
  /partner/findBylessor/{key}:
    get:
      summary: CRUD ACTION findBylessor
      tags:
        - Partner
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Partner"
    
  #-----  Product  -----
  /product/:
    post:
      summary: CRUD ACTION create
      tags:
        - Product
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                productname:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - Product
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    
  /product/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
    post:
      summary: CRUD ACTION update
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
    
  #-----  User  -----
  /user/{id}/changePassword:
    post:
      summary: Change password of user from admin
      tags:
        - User
      responses:
        "200":
          description: OK
    
  /user/:
    post:
      summary: CRUD ACTION create
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                name:
                  type: string
                password:
                  type: string
                roles:
                  type: string
                surname:
                  type: string
                username:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    
  /user/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      summary: CRUD ACTION update
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    
    
  #-----  User  -----
  /Users/{id}/changePassword:
    post:
      summary: Change password by admin API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordAdmin:
                  type: string
      responses:
        '200':
          description: OK
  /Users/{id}:
    post:
      summary: Update User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    delete:
      summary: Delete User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /Users:
    post:
      summary: Create User API
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: 'string'
                password: 
                  type: 'string'
                mail: 
                  type: 'string'
                name: 
                  type: 'string'
                surname: 
                  type: 'string'
                roles: 
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    
# JWT security
security:
  - bearerAuth: [] 
  
  
# Components
components:

  # Security
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  # Data Model
  schemas:
    User:
      properties:
        username:
          type: 'string'
        password: 
          type: 'string'
        mail: 
          type: 'string'
        name: 
          type: 'string'
        surname: 
          type: 'string'
        roles: 
          type: array
          items:
            type: string
      required:
        - username
        - password
        

    Account:
      properties:
        _id:
          type: string
        channel:
          type: string
        description:
          type: string
        maxcredit:
          type: integer
        name:
          type: string
        retailcorpthreshold:
          type: integer
        revolving:
          type: boolean
        segment:
          type: string
      required:
        -  _id
        - description
        - maxcredit
        - name
        - retailcorpthreshold
        - revolving
      
    
    Country:
      properties:
        _id:
          type: string
        code:
          type: string
        name:
          type: string
      required:
        -  _id
        - code
        - name
      
    
    CreditLine:
      properties:
        _id:
          type: string
        applicationid:
          type: string
        creditlimit:
          type: integer
        enddate:
          type: integer
        groupcreditlimit:
          type: integer
        revolving:
          type: boolean
        startdate:
          type: integer
        status:
          type: string
        type:
          type: string
      required:
        -  _id
        - creditlimit
        - enddate
        - revolving
        - startdate
        - status
        - type
      
    
    Lessor:
      properties:
        _id:
          type: string
        externalid:
          type: string
        genesis:
          type: string
        name:
          type: string
        number:
          type: string
        share:
          type: integer
        type:
          type: string
      required:
        -  _id
        - genesis
        - name
        - number
        - share
        - type
      
    
    Organization:
      properties:
        _id:
          type: string
        active:
          type: boolean
        externalid:
          type: string
        formalname:
          type: string
        liable:
          type: boolean
        searchname:
          type: string
        type:
          type: string
      required:
        -  _id
        - externalid
      
    
    Partner:
      properties:
        _id:
          type: string
        externalid:
          type: string
        name:
          type: string
        partnercode:
          type: string
        type:
          type: string
      required:
        -  _id
        - name
        - partnercode
      
    
    Product:
      properties:
        _id:
          type: string
        description:
          type: string
        productname:
          type: string
      required:
        -  _id
        - productname
      
    
    User:
      properties:
        _id:
          type: string
        mail:
          type: string
        name:
          type: string
        password:
          type: string
        roles:
          type: string
        surname:
          type: string
        username:
          type: string
      required:
        -  _id
        - password
        - username
      
    
